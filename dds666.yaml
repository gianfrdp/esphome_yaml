substitutions:
  name: dds666
  id_name: dds666
  external_components_source: github://TheStaticTurtle/esphome_syslog@main
  tx_pin: GPIO19
  rx_pin: GPIO22

esphome:
  name: ${name}
  platform: ESP32
  board: m5stack-atom
  platformio_options:
    upload_speed: 115200

external_components:
  - source: my_components

logger:
  #level: INFO
  baud_rate: 0

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid_2
      password: !secret wifi_password_2

  manual_ip:
    static_ip: 192.168.4.53
    gateway: 192.168.2.1
    subnet: 255.255.240.0
    dns1: 8.8.8.8
    dns2: 192.168.2.1

  reboot_timeout: 15min

  ap:
    ssid: "${device_name}"
    password: !secret_ap_password

web_server:
  port: 80

syslog:
  ip_address: "192.168.2.32"
  port: 514
  strip_colors: true

api:
  reboot_timeout: 0s

ota:

mqtt:
    broker: 192.168.2.32
    client_id: esphome_dds666
    discovery_retain: false
    discovery_object_id_generator: device_name

time:
  - platform: homeassistant
    id: homeassistant_time

light:
  - platform: neopixelbus
    variant: SK6812
    pin: 27
    num_leds: 1
    type: GRB
    id: status_led
    name: ${name} Light
    color_correct: [50%, 50%, 50%]

button:
    - platform: restart
      id: ${id_name}_restart_button
      name: "${name} Restart"

binary_sensor:
  - platform: gpio
    pin:
      number: 39
      inverted: true
    name: ${name} Button
    id: ${id_name}_button
    on_click:
      - min_length: 200ms
        max_length: 900ms
        then:
          - light.toggle: status_led
      - min_length: 1000ms
        max_length: 5000ms
        then:
          - button.press: ${id_name}_restart_button  
    #on_press:
    #  then:
    #    - light.toggle: ${id_name}_status_led
        
uart:
  id: uart_0
  baud_rate: 9600
  parity: NONE
  data_bits: 8
  stop_bits: 1
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}
  rx_buffer_size: 384
#  debug:
#    direction: BOTH
#    after:
#      delimiter: "\r"
#    sequence:
#      - lambda: UARTDebug::log_string(direction, bytes);

modbus:
  id: modbus0
  uart_id: uart_0
  send_wait_time: 200ms

modbus_controller:
  id: dds666
  modbus_id: modbus0
  address: 0x1
  command_throttle: 200ms
  setup_priority: -10
  update_interval: 30s

sensor:
  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Voltage"
    id: ${id_name}_voltage
    register_type: holding
    address: 0x2000
    register_count: 2
    unit_of_measurement: "V"
    device_class: voltage
    value_type: FP32
    accuracy_decimals: 1
    #filters:
    #  - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Current"
    id: ${id_name}_current
    register_type: holding
    address: 0x2002
    register_count: 2
    unit_of_measurement: "A"
    device_class: current
    value_type: FP32
    accuracy_decimals: 3

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Active Power"
    id: ${id_name}_active_power
    register_type: holding
    address: 0x2004
    register_count: 2
    unit_of_measurement: "W"
    device_class: power
    value_type: FP32
    accuracy_decimals: 1
    filters:
      - multiply: 1000
    on_value:
      then:
       #- mqtt.publish:
       #    topic: domoticz/in
       #    payload: !lambda |-
       #       std::string messageO;
       #       char str[256];
       #       snprintf(str, sizeof(str), "{\"idx\":25666,\"nvalue\":0,\"svalue\":\"%.2f\"}", x);
       #       messageO += str;
       #       // ESP_LOGD("domoticz/in", "%s", messageO.c_str());
       #       return messageO;
       - mqtt.publish_json:
            topic: domoticz/in
            payload: |-
                root["idx"]    = 25666;
                root["nvalue"] = 0;
                root["svalue"] = to_string(id(${id_name}_active_power).state);


  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Reactive Power"
    id: ${id_name}_reactive_power
    register_type: holding
    address: 0x2006
    register_count: 2
    unit_of_measurement: "var"
    device_class: reactive_power
    value_type: FP32
    accuracy_decimals: 1
    filters:
      - multiply: 1000
  
  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Apparent Power"
    id: ${id_name}_apparent_power
    register_type: holding
    address: 0x2008
    register_count: 2
    unit_of_measurement: "VA"
    device_class: apparent_power
    value_type: FP32
    accuracy_decimals: 1
    filters:
      - multiply: 1000

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Power Factor"
    id: ${id_name}_power_factor
    register_type: holding
    address: 0x200A
    register_count: 2
    device_class: power_factor
    value_type: FP32
    accuracy_decimals: 3

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Frequency"
    id: ${id_name}_frequenzy
    register_type: holding
    address: 0x200E
    register_count: 2
    unit_of_measurement: "Hz"
    device_class: frequency
    value_type: FP32
    accuracy_decimals: 3

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Total Energy"
    # Current active total electric energy in forward direction
    id: ${id_name}_total_energy
    register_type: holding
    address: 0x4000
    register_count: 2
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    value_type: FP32
    accuracy_decimals: 0
    filters:
      - multiply: 1000
    #on_value:
    #  then:
    #   - mqtt.publish_json:
    #       topic: domoticz/in
    #       payload: |-
    #         root["type"] = "command";
    #         root["param"] = "udevice";
    #         root["idx"] = 26186;
    #         root["nvalue"] = 0;
    #         root["svalue"] = id(${id_name}_total_energy).state;     

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Total Import Energy"
    id: ${id_name}_imp_ep_t1
    register_type: holding
    address: 0x4002
    register_count: 2
    value_type: FP32
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Total Export Energy"
    id: ${id_name}_exp_ep_t1
    register_type: holding
    address: 0x400C
    register_count: 2
    value_type: FP32
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 3

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "UcodE"
    id: ${id_name}_ucode
    register_type: holding
    address: 0x0000
    register_count: 1
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Software Revision"
    id: ${id_name}_revision
    register_type: holding
    address: 0x0001
    register_count: 1
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Net"
    id: ${id_name}_net
    register_type: holding
    address: 0x0003
    register_count: 1
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Modbus Address"
    id: ${id_name}_address
    register_type: holding
    address: 0x0006
    register_count: 1
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Modbus Speed"
    id: ${id_name}_baud_speed
    register_type: holding
    address: 0x000C
    register_count: 1
    value_type: U_WORD

  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Export Energy"
    #(Current) Total reverse active energy
    id: ${id_name}_export_energy
    register_type: holding
    address: 0x400A
    register_count: 2
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    value_type: FP32
    accuracy_decimals: 0
    filters:
      - multiply: 1000

  #- platform: modbus_controller
  #  modbus_controller_id: dds666
  #  name: "Energy Max Demand Time"
  #  # (Current) Total forward active energy maximum demand anc occurence time
  #  id: ${id_name}_imp_max_demand_time
  #  register_type: holding
  #  address: 0x5000
  #  register_count: 4
  #  value_type: U_QWORD
  #  accuracy_decimals: 0

  #- platform: modbus_controller
  #  modbus_controller_id: dds666
  #  name: "Export Energy Max Demand Time"
  #  # (Current) Total reverse active energy maximum demand anc occurence time
  #  id: ${id_name}_exp_max_demand_time
  #  register_type: holding
  #  address: 0x5004
  #  register_count: 4
  #  value_type: U_QWORD
  #  accuracy_decimals: 0

  - platform: wifi_signal
    name: "${name} WiFi Signal"
    update_interval: 60s

  - platform: uptime
    name: "${name} Uptime"
    id: ${id_name}_uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: ${id_name}_uptime_human
            state: !lambda |-
              int seconds = round(id(${id_name}_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: total_daily_energy
    name: "Total Daily Energy"
    power_id: ${id_name}_active_power
    id: ${id_name}_total_daily_energy
    method: trapezoid
    state_class: total
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh
    accuracy_decimals: 3

switch:
  - platform: modbus_controller
    modbus_controller_id: dds666
    name: "Electric energy zero clearing clr.e"
    id: ${id_name}_clre
    register_type: holding
    use_write_multiple: true
    address: 0x002
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

text_sensor:
  - platform: version
    name: "${name} ESPHome Version"

  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${name} IP
    ssid:
      name: ${name} SSID
    bssid:
      name: ${name} BSSID
    mac_address:
      name: ${name} MAC
    scan_results:
      name: ${name} Latest Scan Results

  - platform: template
    name: ${name} Uptime Human Readable
    id: ${id_name}_uptime_human
    icon: mdi:clock-start

  - platform: template
    name: "${name} Usage"
    #description: Power + Energy usage to send to domoticz idx
    lambda: |-
        if (id(${id_name}_active_power).state >= 0 and id(${id_name}_total_energy).state >= 0) {
            char str[20];
            snprintf(str, sizeof(str), "%.2f;%.2f", id(${id_name}_active_power).state, id(${id_name}_total_energy).state);
            // ESP_LOGD("text_sensor", "Creating ${name} Usage %s", str);
            return { str };
        } else {
            // ESP_LOGD("text_sensor", "No values for usage");
            return {""};
        }
    on_value:
      then:
        #- mqtt.publish:
        #    topic: domoticz/in
        #    payload: !lambda |-
        #      std::string messageO;
        #      char str[256];
        #      // ESP_LOGD("domoticz/in", "%s", x);
        #      snprintf(str, sizeof(str), "{\"idx\":26186,\"nvalue\":0,\"svalue\":\"%s\"}", x.c_str());
        #      // ESP_LOGD("domoticz/in", "%s", str);
        #      messageO += str;
        #      // ESP_LOGD("domoticz/in", "%s", messageO.c_str());
        #      return messageO;
        - mqtt.publish_json:
            topic: domoticz/in
            payload: |-
              root["idx"]    = 26186;
              root["nvalue"] = 0;
              root["svalue"] = x;
    update_interval: 60s